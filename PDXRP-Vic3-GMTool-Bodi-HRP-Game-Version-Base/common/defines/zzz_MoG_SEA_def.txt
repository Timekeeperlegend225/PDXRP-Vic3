NEconomy = {
	# Honestly the Vanilla minimum is a joke
	MIN_CONSTRUCTION_EFFICIENCY = 0.15 # 0.05					# Construction efficiency cannot go below this amount
	
	# Allow downsize from 2->1
	# Faster but not excessive downsize speed
	AUTO_DOWNSIZE_BUILDING_PRIVATELY_OWNED_THRESHOLD = 0.2 # 0.5	# At least this fraction of a building's levels must be privately owned for it to be considered for auto-downsizing
	AUTO_DOWNSIZE_BUILDING_MIN_EMPTY_LEVELS = 1 # 2					# A building must be missing at least this many levels of employment (in absolute numbers) to start considering auto-downsizing (both this and the below requirement are applied)
	AUTO_DOWNSIZE_BUILDING_MIN_EMPTY_FRACTION = 0.2					# A building must be missing at least this many levels of employment (in relative numbers) to start considering auto-downsizing (both this and the above requirement are applied)
	AUTO_DOWNSIZE_BUILDING_MONTHS_TO_WAIT = 8 #12					# After a building decides to start auto-downsizing, wait this many months before actually starting to downsize, in case conditions change
	
	# General market tweaks
	MIN_GOODS_PRICE	= 1							# A good cannot have a lower base price than this (changing this does nothing unless PRICE_RANGE > 0.95)
	PRICE_RANGE = 0.9 # 0.75						# min price of a good is base * (1 - PRICE_RANGE), Max price is base * (1 + PRICE_RANGE), PRICE_RANGE is locked to [0-1]
	BUY_SELL_DIFF_AT_MAX_FACTOR = 3 # 2				# the difference between buy/consumption and sell/production at min/max pricing, e.g. if set to 4 then if buy orders are 4x sell orders price is maxed
	
	# Slightly less sever than VTM
	GOODS_SHORTAGE_PENALTY_THRESHOLD = 0.4 # 0.5	# If supply / demand is lower than this, start applying output penalties, by default this should be ( 1 / BUY_SELL_DIFF_AT_MAX_FACTOR )
	GOODS_SHORTAGE_PENALTY_INCREASE_SPEED = 0.01  	# Goods shortage penalty increases by this fraction of the target each day
	GOODS_SHORTAGE_PENALTY_DECREASE_SPEED = 0.01  	# Goods shortage penalty goes down by this fraction of GOODS_SHORTAGE_PENALTY_MAX each day
	GOODS_SHORTAGE_PENALTY_MIN = 0.05				# Goods shortage penalty can't be lower than this if there is any shortage
	GOODS_SHORTAGE_PENALTY_MAX = 0.7 # 0.5			# Goods shortage penalty can't be higher than this
	
	# Inspired by Henrax Le Chamalax's "Better trade routes" but updated for sensitivity to the new economy balance
	TRADE_ROUTE_BUREAUCRACY_COST = 8 # 20						# The cost in BUR per trade route
	TRADE_ROUTE_START_LEVEL = 1	# Tried 3, bad idea.			# All new trade routes start at this level
	TRADE_ROUTE_MAX_LEVEL = 9999 # 100							# Trade routes cannot be higher level than this
	TRADE_ROUTE_MIN_TOTAL_IMPORTS = 3 # 5						# This amount of a good can always be imported to a market even if there is no demand
	TRADE_ROUTE_DEFAULT_GOODS_QUANTITY = 3 # 5					# Base quantity traded from trade routes, if not otherwise specified in goods type
	TRADE_ROUTE_ECONOMY_OF_SCALE = 0.1 # 0.25					# Each level of trade route after the first adds this % to desired trade quantity
	TRADE_ROUTE_ECONOMY_OF_SCALE_MAX_LEVEL = 500 # 41			# After this level, trade route economy of scale no longer increases the amount per level
	TRADE_ROUTE_REQUIRED_CONVOY_BUFFER = 0.05					# Trade routes may not increase level if you wouldn't end up with at least this 'buffer' of produced convoys
	
	# TRADE_ROUTE_USE_AVERAGE_PRE_AND_POST_TRADE_PRICES = no			# Whether trade routes should use an average of pre and post-trade prices or just market prices (0 = market prices, 1 = pre/post trade prices)
	
	TRADE_ROUTE_AUTO_INCREASE_EMPLOYMENT_THRESHOLD = 0.9 					# If trade route has this much of its max staffing level employed, it can automatically increase its level
	TRADE_ROUTE_AUTO_INCREASE_ACCEPTABLE_REVENUE_DIFFERENCE = 1 # 1.1		# Multiply revenue of new trade route level by this for the purpose of considering whether it's OK to auto-increase level (means that trade routes can level up even when slightly decreasing overall revenue)
	TRADE_ROUTE_AUTO_INCREASE_VERY_LOW_PRODUCTIVITY_THRESHOLD = 5 # 3		# If trade route's productivity is below this, always automatically decrease its level (regardless of total revenue)
	TRADE_ROUTE_AUTO_INCREASE_LOW_PRODUCTIVITY_THRESHOLD = 18 # 6			# If trade route's productivity would drop below this, don't automatically increase its level (regardless of total revenue)
	TRADE_ROUTE_AUTO_INCREASE_HIGH_PRODUCTIVITY_THRESHOLD = 500 # 10		# If trade route's productivity is above this, it's always fine to automatically increase its level (regardless of total revenue)
	TRADE_ROUTE_AUTO_REDUCTION_EMPLOYMENT_THRESHOLD = 0.75 					# If trade route has less than this of its max staffing level employed and could not hire anyone last week, it can automatically decrease its level
	TRADE_ROUTE_AUTO_REDUCTION_ACCEPTABLE_REVENUE_DIFFERENCE = 1.1 # 1.15	# Multiply revenue of current trade route level by this for the purpose of considering whether we should auto-decrease level (means that trade routes won't level down just for the purpose of a small revenue increase)
	
	# Other trade defines untouched:
	# TRADE_CENTER_BASE_NUM_LEVELS_PER_TRADE_ROUTE = 0 # 1		# Each distinct trade route generates this number of Trade Center levels to manage it
	# 	Tried 0 here but it causes quirky edge-cases.
	# TRADE_CENTER_NUM_LEVELS_PER_TRADE_ROUTE_LEVEL = 1 # Each level of a trade route generates this number of Trade Center levels to manage it
	# TRADE_CENTER_MIN_AVAILABLE_WORKFORCE = 20000 # Don't put new trade centers in places with less available workforce than this
	# TRADE_CENTER_TRADE_ROUTE_STATE_FACTOR = 4	# When deciding trade center for a trade route, increase score by this if the state is the exit/entry port for the trade route
	# TRADE_CENTER_TRADE_ROUTE_STATE_NEIGHBOR_FACTOR = 2	# When deciding trade center for a trade route, increase score by this if the state neighboring the exit/entry port for the trade route
	# TRADE_CENTER_TREATY_PORT_FACTOR = 15 	# When deciding trade center for a trade route, increase score by this for treaty port in the remote market
	# TRADE_CENTER_MARKET_CAPITAL_FACTOR = 5 	# When deciding trade center for a trade route, increase score by this for the market capital in the market
	# TRADE_CENTER_PORT_LEVEL_FACTOR = 1 	# When deciding trade center for a trade route, multiply port level by this and add to the score
	# TRADE_CENTER_EXISTING_TRADE_ROUTES_FACTOR = -1  # When deciding trade center for a trade route, multiply the number of trade routes already associated with the state by this score
	
	# Wage diversity
	MINIMUM_WAGE_RATE = 1.0 # 10.0									# The wage rate can never drop below this, no matter what (weekly £ per POP_SIZE_PACKAGE employees)
	BUILDING_INITIAL_WAGE_WEEKS = 1 # 2			   					# A building will not adjust its wages for the first this many weeks of its existence                                                                    
	MAX_WAGE_STEP_CHANGE = 0.5 # 0.1			   					# Wage rates can change at most this much each week
	DEFAULT_MIN_HIRING_RATE = 0.01 									# Default weekly min hiring limit applied in a building per profession as a ratio of full employment
	DEFAULT_MAX_HIRING_RATE = 0.2 # 0.1 							# Default weekly max hiring limit applied in a building per profession as a ratio of full employment
	BUILDING_PAUSE_HIRES_CASH_RESERVES_THRESHOLD = 0.25 # 0.75 		# If cash reserves are less than this, buildings should consider pausing new hires to wait for cash reserves
	# Pairs with AUTO_DOWNSIZE_BUILDING_MIN_EMPTY_FRACTION in behavior, above (1-THAT)= will raise wages before downsizing from lack of staff:
	BUILDING_MAX_EMPLOYMENT_FRACTION_TO_RAISE_WAGES = 0.85 # 0.5	# If the employment fraction of a building is above this, don't raise wages just to try and snipe employees from other buildings
	# Overlapping range ensures temporarily inflated wages can come down before financial stress sets in.
	BUILDING_PROFIT_TARGET_TO_RAISE_WAGES = 0.3						# Required profit margin to consider raising wages for SoL or employment reasons, with BUILDING_WEEKS_BETWEEN_PAY_CHANGES weeks cooldown
	BUILDING_PROFIT_TARGET_TO_LOWER_WAGES = 0.5 # 0.15				# If profit margin is this or below, buildings should lower their wages, with BUILDING_WEEKS_BETWEEN_PAY_CHANGES weeks cooldown
																										# (previously: consider lowering wages for SoL or employment reasons)
	BUILDING_RAISE_WAGES_MIN_RELEVANT_POP_SIZE = 50					# Pops with less workforce than this are ignored when checking whether a profitable building should raise wages because of radicalizing workers
	BUILDING_RAISE_WAGES_DISCRIMINATION_FACTOR = 0.66				# Profitable buildings only care to raise wages for discriminated pops if their wealth to expected SoL ratio is less than this
	BUILDING_LOWER_WAGES_TARGET_WEALTH_MULT = 1.33					# Buildings will consider lowering wages if all significant pops working in them have this * the target wealth to expected SoL ratio
	BUILDING_PROFIT_TARGET_TO_WITHDRAW_CASH = 0.2					# If profit margin is this or below, buildings should withdraw money from the cash reserves to make up the difference
		# Previously: BUILDING_CASH_RESERVES_WITHDRAW_PROFIT_TARGET before directional revamp in 1.8
	OWNERSHIP_BUILDING_PROFIT_TARGET_TO_RAISE_WAGES = 0.5			# Overrides BUILDING_PROFIT_TARGET_TO_RAISE_WAGES for buildings that own other buildings
	OWNERSHIP_BUILDING_PROFIT_TARGET_TO_LOWER_WAGES = 0.3			# Overrides BUILDING_PROFIT_TARGET_TO_LOWER_WAGES for buildings that own other buildings
	OWNERSHIP_BUILDING_PROFIT_TARGET_TO_WITHDRAW_CASH = 0.2 # 0.4	# Overrides BUILDING_PROFIT_TARGET_TO_WITHDRAW_CASH for buildings that own other buildings
		# Previously: OWNERSHIP_BUILDING_CASH_RESERVES_WITHDRAW_PROFIT_TARGET before directional revamp in 1.8
	SUBSISTENCE_BUILDING_PROFIT_TARGET_TO_RAISE_WAGES = 5.0			# Overrides BUILDING_PROFIT_TARGET_TO_RAISE_WAGES for subsistence buildings
	SUBSISTENCE_BUILDING_PROFIT_TARGET_TO_LOWER_WAGES = 3.0			# Overrides BUILDING_PROFIT_TARGET_TO_LOWER_WAGES for subsistence buildings
	SUBSISTENCE_BUILDING_PROFIT_TARGET_TO_WITHDRAW_CASH = 2.0 # 4.0	# Overrides BUILDING_PROFIT_TARGET_TO_WITHDRAW_CASH for subsistence buildings
	BUILDING_WEEKS_BETWEEN_PAY_CHANGES = 12 # 0 (v1.8)				# Cooldown between changes in pay, so buildings don't overcompensate for a temporary change in circumstances. If the building is unprofitable it uses BUILDING_WEEKS_BETWEEN_PAY_CHANGES_WHEN_UNPROFITABLE instead.
	BUILDING_WEEKS_BETWEEN_PAY_CHANGES_WHEN_UNPROFITABLE = 4 # 0 (v1.8) 	# Cooldown between changes in pay, so buildings don't overcompensate for a temporary change in circumstances. Only used when unprofitable.
	BUILDING_DEFAULT_MIN_EARNINGS_TO_HIRE_EMPLOYEES = 3  					# Non-subsidized buildings will not hire if it would result in their annual earnings/employee falling below this threshold (default value, can be overridden for building group)
	
	# MEM values to test?
	# SUBSISTENCE_OUTPUT_AVERAGE_WAGE_RATE_FACTOR = 50 # 150		# Each 1.0 of subsistence output counts as this much wage rate when setting normal wages 
	
	# National Budgeting Functions
	COUNTRY_MIN_CREDIT_BASE = 10000 # 100000			    # Added to the total Building Cash Reserves to determine credit limit (base)	                                                                         
	COUNTRY_MIN_CREDIT_SCALED = 0.01 # 0.05		   			# Added to the total Building Cash Reserves to determine credit limit (multiplied by GDP)	                                                             
	# MEM values to test?
	# GOLD_RESERVE_MIN = 1000						# If Gold Reserves are computed to be lower than this, it's instead set to this                                                                          
	# GOLD_RESERVE_LIMIT_FACTOR = 1.0 # 0.2			# The base factor of annual GDP that should be provided as a Gold Reserve                                                                                
	# GOLD_RESERVE_RETURNS_FACTOR = 0.1 # 1.0		# How rapidly diminishing returns will cause gold reserves to drop off after the limit has been reached (higher value increases penalty)                 
}

NAI = {
	# The AI never cancels current trade routes of this level or above
	TRADE_ROUTE_MAX_LEVEL_TO_CANCEL_SCALING = 0.001 # 0.002 		# Scales with (acting market trade potential * goods quantity per trade route level)
	TRADE_ROUTE_MAX_LEVEL_TO_CANCEL_MIN = 2 # 1						# Always, no matter what, be *capable* of canceling level 1 trade routes.
	TRADE_ROUTE_MAX_LEVEL_TO_CANCEL_MAX = 9999 # 9					# This is actually a nearly useless function that appears to only make the AI hang onto bad routes with large markets.
	
	# Reduce the incidence of weird post-formation trade routes:
	TRADE_ROUTE_MIN_MARKET_SHARE = 0.35 # 0.25 				# If the AI is junior in a customs union and has less than this market share in a market, don't make any trade routes
	# Matches with TRADE_ROUTE_AUTO_INCREASE_VERY_LOW_PRODUCTIVITY_THRESHOLD so there's no oddity:
	TRADE_ROUTE_MIN_ACCEPTABLE_PRODUCTIVITY = 5 # 3			# If a potential trade route would result in lower productivity than this, don't create it unless it's to resolve a shortage
	# The original value just means that big countries stop initiating smaller trades even though they can most afford to have them:
	TRADE_ROUTE_MIN_WANTED_RELATIVE_VOLUME = 0.05 # 0.1		# If a trade route won't account for at least this fraction of buy/sell orders in the market, don't create it
	
	TRADE_ROUTE_MIN_VALUE_TO_IGNORE_VOLUME_CHECK = 2000 # 1000	# If a trade route is trading at least this much base value worth of goods, ignore the relative check above
	TRADE_ROUTE_ACCEPTABLE_SPENDING = 0.002						# AI will not spend more BUR than this on trade routes (scaled by weekly GDP)
	TRADE_ROUTE_ACCEPTABLE_SPENDING_MINIMUM = 20				# If TRADE_ROUTE_ACCEPTABLE_SPENDING is less than this, this is used instead (so even small countries can do some trading other than their free routes)
	TRADE_ROUTE_MARKET_RANDOM_FACTOR = 1.0						# The higher this is, the more random the AI will be about which markets it trades with
	TRADE_ROUTE_GOODS_RANDOM_FACTOR = 1.0						# The higher this is, the more random the AI will be about which goods it selects for trading
	
	# Honestly a weird restriction since there's no inflation or whatever to be driven by trade balance:
	TRADE_ROUTE_EXPORT_VS_IMPORT_TOLERANCE = 4.0 # 3.0 #	# The AI is OK with having up to this amount more import than export routes or vice versa
	# This does cover total traded route value, but also encourages the AI to trade more expensive goods, so increase with caution:
	TRADE_ROUTE_TRADE_VALUE_FACTOR = 30 # 1.0				# The expected final trade volume * base price of goods is multiplied by this
	# Big trade routes are good and should definitely supplant smaller ones if they can:
	TRADE_ROUTE_RELATIVE_VOLUME_FACTOR = 50 # 2.0			# Multiply trade route score by ( 1 + supplied fraction of buy/sell orders in the market * this )
	
	TRADE_ROUTE_WANTED_NEW_GOODS_MULT = 100			# Multiply trade route score by this if the trade route is importing a good to the market that the AI wants and has no local production or other import routes for
	# This is meant to stop them using excessive convoys, but frankly, there're usually too many convoys and not enough trade:
	TRADE_ROUTE_DISTANCE_DIVISOR = 0.001 # 0.002	# Divide the trade route value by 1 + (absolute distance between the two market capitals * this) to encourage AI to trade with nearby markets (we use this instead of more expensive convoy distance calc)
	TRADE_ROUTE_TARIFF_DIVISOR = 2					# Divide the trade route value by 1 + ( total tariff rate * this )
	
	# Sometimes more trade routes are better, consider lowering this value so that multiple profitable trade routes for the same good are considered (this improves the stability effects of changing TRADE_ROUTE_REPLACE_THRESHOLD):
	TRADE_ROUTE_EXISTING_ROUTES_DIVISOR = 0.1 # 0.5			# Score for trade route is divided by (1 + this) for each trade route the market has of the same goods
	
	TRADE_ROUTE_FAVORED_GOODS_MULT = 2.0		# Total weight is multiplied by this if the trade route is trading a good in a way the AI favors
	TRADE_ROUTE_DISFAVORED_GOODS_MULT = 0.5		# Total weight is multiplied by this if the trade route is trading a good in a way the AI disfavors
	
	# It is important the AI can swap bad routes for good ones reasonably efficiently - this is because the AI cannot use the same discernment as a player to pick them as strategically:
	TRADE_ROUTE_REPLACE_THRESHOLD = 1.1 # 5.0				# If there is a sufficiently better new trade route (old route score x this), remove the old one (score already includes competitiveness bonus)
	
	TRADE_ROUTE_SUPPLY_NETWORK_STRENGTH_THRESHOLD = 1.0		# If supply network strength less than this, don't make new trade routes
	TRADE_ROUTE_REDUCE_SHORTAGE_MULT = 10					# Multiply score by this if we're reducing the market's shortages
	TRADE_ROUTE_INCREASE_SHORTAGE_MULT = 0					# Multiply score by this if we're increasing the market's shortages
	TRADE_ROUTE_IMPORT_SCORE_MULT = 1.0						# How much does AI multiply score of import routes
	TRADE_ROUTE_EXPORT_SCORE_MULT = 1.5						# How much does AI multiply score of export routes
	TRADE_ROUTE_DURATION_FACTOR = 10.0						# AI multiplies value of a route by ( 1 + this ) at COMPETITIVENESS_DURATION_BONUS_MAX_MONTHS (scales linearly up to this value at a lower duration)

	# UNUSED_CAPPED_RESOURCE_RATIO_TO_START_DISCOURAGING_EXPORT = 0.5	# If the untapped potential production of a resource-capped good in the country is not at least market buy orders * this, switch to punitive export tariffs
	# UNUSED_CAPPED_RESOURCE_RATIO_TO_STOP_DISCOURAGING_EXPORT = 1.0	# If the untapped potential production of a resource-capped good in the country is at least market buy orders * this, stop applying punitive export tariffs
}